// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name BespotSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Alamofire
@_exported import BespotSDK
import CoreBluetooth
import CoreLocation
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum BTQuestionType : Swift.String, Swift.Decodable {
  case emojiRating
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BTQuestion : Swift.Decodable {
  public let text: Swift.String
  public let type: BespotSDK.BTQuestionType
  public init(from decoder: any Swift.Decoder) throws
}
public enum BTErrorType : Swift.String, Swift.Decodable {
  case indoorDataModelNotFound
  case noStoreNearby
  case sessionEndError
  case sessionNotFound
  case inoutUnavailable
  case multipleStores
  case noStoresFound
  case noLocationOrReadingsData
  case storeUnderMaintenance
  case tokenNotValid
  case noStoreReadings
  case noActiveAccount
  case notAuthenticated
  case permissionDenied
  case profileCannotBeEmpty
  case deviceNotSupported
  case serviceUnavailableOutsideWorkingHours
  case noSurveyFound
  case serviceNotAvailable
  case userAnswerExists
  case objectNotFound
  case unknownError
  case invalidUUID
  case invalid
  case storeIdNotSet
  case noStatusAvailable
  case notSubscribed
  case alreadyScanning
  case encodingFailed
  case errorConvertingReadings
  case unknownServerError
  case internalClientError
  case networkError
  case notInitialised
  case bluetoothError
  case bluetoothPermissionDenied
  case noBeaconsUUIDAvailable
  case notSupportedBeaconDevice
  case userIdNotSet
  case altUserIdNotSet
  case awayFromStore
  case internalSDKError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BTError : Swift.Decodable {
  public let detail: Swift.String
  public let code: BespotSDK.BTErrorType
  public init(from decoder: any Swift.Decoder) throws
}
extension BespotSDK.BTError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol BTSurveyDelegate {
  func didUpdateSurveys(surveys: [BespotSDK.BTSurvey])
  func didFailUpdateSurveys(error: BespotSDK.BTError)
}
extension BespotSDK.BTSurveyDelegate {
  public func didFailUpdateSurveys(error: BespotSDK.BTError)
}
public protocol BTScannerDelegate {
  func didUpdateReadings(readings: [BespotSDK.BTReading])
  func didFailReadings(error: BespotSDK.BTError)
}
extension BespotSDK.BTScannerDelegate {
  public func didFailReadings(error: BespotSDK.BTError)
}
public protocol BTConfigurationDelegate {
  func didCompleteConfiguration()
  func didFailUpdateConfiguration(error: BespotSDK.BTError)
}
extension BespotSDK.BTConfigurationDelegate {
  public func didCompleteConfiguration()
  public func didFailUpdateConfiguration(error: BespotSDK.BTError)
}
public protocol BTInOutDelegate {
  func didUpdateInOut(status: BespotSDK.BTInOutStatus)
  func didFailUpdateInOut(error: BespotSDK.BTError)
}
extension BespotSDK.BTInOutDelegate {
  public func didFailUpdateInOut(error: BespotSDK.BTError)
}
@_hasMissingDesignatedInitializers open class BTSDK {
  public static let shared: BespotSDK.BTSDK
  public var configurationDelegate: (any BespotSDK.BTConfigurationDelegate)?
  public var inOutDelegate: (any BespotSDK.BTInOutDelegate)?
  public var scannerDelegate: (any BespotSDK.BTScannerDelegate)?
  public var surveyDelegate: (any BespotSDK.BTSurveyDelegate)?
  public func configure(applicationId: Swift.String, applicationSecret: Swift.String, params: [Swift.String : Any]? = nil)
  public func getSurveys()
  public func sendAnswer(answer: Swift.String, question: BespotSDK.BTQuestion, survey: BespotSDK.BTSurvey, completion: @escaping (_ answer: BespotSDK.BTAnswer?, _ error: BespotSDK.BTError?) -> Swift.Void)
  public func getStores(completion: @escaping (_ stores: [BespotSDK.BTStore]?, _ error: BespotSDK.BTError?) -> Swift.Void)
  public func subscribeForInOutUpdates()
  public func subscribeForInOutUpdates(params: [Swift.String : Any])
  public func subscribeForInOutUpdates(coordinates: CoreLocation.CLLocationCoordinate2D?)
  public func subscribeForInOutUpdates(coordinates: CoreLocation.CLLocationCoordinate2D?, params: [Swift.String : Any])
  public func getLastInOutStatus() -> (BespotSDK.BTInOutStatus?, BespotSDK.BTError?)
  public func unsubscribe()
  public func setUserId(_ userId: Swift.String)
  public func setAltUserId(_ altUserId: Swift.String)
  public func startBeaconScanning(profileType: BespotSDK.BTProfileType, iBeaconUUIDsToScan: [Swift.String]? = nil, params: [Swift.String : Any]? = nil)
  public func stopBeaconScanning()
  @objc deinit
}
public enum BTProfileType : Swift.String, Swift.Encodable {
  case iBeacon
  case eddystone
  case eid
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BTReading : Swift.Encodable {
  public let distance: Swift.Double
  public let rssi: Swift.Int
  public var txPower: Swift.Int?
  public var UUID: Swift.String?
  public var major: Swift.UInt16?
  public var minor: Swift.UInt16?
  public let profileType: BespotSDK.BTProfileType
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BespotSDK.BTReading : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BespotSDK.BTReading : Swift.Equatable {
  public static func == (lhs: BespotSDK.BTReading, rhs: BespotSDK.BTReading) -> Swift.Bool
}
public struct BTAnswer : Swift.Codable {
  public let uuid: Swift.String
  public let answer: Swift.String
  public let questionId: Swift.String
  public let surveyId: Swift.String
  public let storeId: Swift.String
  public let timestamp: Swift.Int64
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BTSurvey : Swift.Decodable {
  public let title: Swift.String
  public let questions: [BespotSDK.BTQuestion]
  public init(from decoder: any Swift.Decoder) throws
}
public struct BTStore : Swift.Decodable {
  public let uuid: Swift.String
  public let name: Swift.String
  public let storeCode: Swift.String
  public let address: Swift.String
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public init(from decoder: any Swift.Decoder) throws
}
extension BespotSDK.BTStore : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum BTInOutStatusType : Swift.String, Swift.Decodable {
  case inside
  case outside
  case away
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BTInOutStatus : Swift.Decodable {
  public let status: BespotSDK.BTInOutStatusType
  public let storeCode: Swift.String?
  public let timestamp: Swift.Int64
  public let eids: [Swift.String]?
  public var datetime: Foundation.Date {
    get
  }
}
extension BespotSDK.BTInOutStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BespotSDK.BTInOutStatus : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension BespotSDK.BTInOutStatus {
  public init(from decoder: any Swift.Decoder) throws
}
extension BespotSDK.BTQuestionType : Swift.Equatable {}
extension BespotSDK.BTQuestionType : Swift.Hashable {}
extension BespotSDK.BTQuestionType : Swift.RawRepresentable {}
extension BespotSDK.BTErrorType : Swift.Equatable {}
extension BespotSDK.BTErrorType : Swift.Hashable {}
extension BespotSDK.BTErrorType : Swift.RawRepresentable {}
extension BespotSDK.BTProfileType : Swift.Equatable {}
extension BespotSDK.BTProfileType : Swift.Hashable {}
extension BespotSDK.BTProfileType : Swift.RawRepresentable {}
extension BespotSDK.BTInOutStatusType : Swift.Equatable {}
extension BespotSDK.BTInOutStatusType : Swift.Hashable {}
extension BespotSDK.BTInOutStatusType : Swift.RawRepresentable {}
